#!/usr/bin/env perl
# arrangeProject
use strict;
use warnings;
use feature 'say';
use autodie;
use File::Path qw(make_path);
use File::Copy;
use File::Find;
use Cwd qw(abs_path);
use Switch;
use Getopt::Long;

my $usage = << "EOU";

Synopsis:

    arrangeProject --run

Description:

    arrangeProject will create all the needed UGP directories, 
    and move all files into their proper locations.

    * Must be ran from the directory created by createProject *
    * or the config file output directory. *

Required options:

    --run   :   Allow arrangeProject to begin.

Additional options:

    -help   :   This usage statement.                                    

EOU

## exit on help statement
my %c_opts = ();
GetOptions( 
    \%c_opts, 
    "run|r",
    "help|h"
);
die $usage if $c_opts{help};
die $usage unless ($c_opts{run});

## remove unneeded
say "Removing unneeded files...";
my @to_rm = glob("*theVoid chr* temp-core* *cfg PROGRESS*");
foreach my $trash (@to_rm) {
    chomp $trash;
    system("rm -rf $trash");
}

## create the needed directories
say "Building needed directories...";
make_path(
    'Analysis',
    'Data/PolishedBams',     'Data/Primary_Data',
    'Reports/RunLogs',       'Reports/fastqc',
    'Reports/flagstat',      'Reports/stats',
    'Reports/featureCounts', 'Reports/SnpEff',
    'VCF/Complete',          'VCF/GVCFs',
    'VCF/WHAM',
);

## list of all the file types to collect.
## maintain order
my @file_types = (
    "bam",          "bam.bai",
    "fastq",        "fq",
    "fastqc*",      "flagstat",
    "stats",        "ann*",
    "fcounts*",     "g.vcf",
    "g.vcf.idx",    "WHAM*",
    "log.txt",      "multiqc.report.html",
    "summary.html", "pdf",
    "csv",          "genes.txt",
    "FQF*"
);

## find each type and move.
say "Moving file types into correct directories...";
foreach my $type (@file_types) {
    chomp $type;
    my @to_move = glob "*$type";
    my @abs_to_move = map { abs_path $_ } @to_move;
    location_mv( \@abs_to_move, $type );
}

### Remove additional unneeded files.
## remove lookup.
my %removeable = (
    'sort.WHAM.vcf'           => '1',
    'tmp.WHAM.vcf'            => '1',
    'cat_genotyped.vcf'       => '1',
    'cat_genotyped.vcf.idx'   => '1',
    'cat_recal_INDEL.vcf'     => '1',
    'cat_recal_INDEL.vcf.idx' => '1',
    'cat_recal_SNP.vcf'       => '1',
    'cat_recal_SNP.vcf.idx'   => '1',
    'indel_plots.R'           => '1',
    'indel_recal'             => '1',
    'indel_recal.idx'         => '1',
    'indel_tranches'          => '1',
    'mergeIndv.vcf'           => '1',
    'snp_plots.R'             => '1',
    'snp_recal'               => '1',
    'snp_recal.idx'           => '1',
    'snp_tranches'            => '1',
);

say "Cleaning up trash...";
my @trash;
my @dir = abs_path('.');
find( \&unneeded_rm, @dir );
unlink @trash if @trash;
say "Finished!";

## ----------------------------------------------------- ##

sub unneeded_rm {
    my $file      = $_;
    my $path_file = $File::Find::name;

    foreach my $extra ( keys %removeable ) {
        if ( $_ =~ /$extra/ ) {
            push @trash, abs_path($_);
        }
    }
}

## ----------------------------------------------------- ##

sub location_mv {
    my ( $to_mv, $type ) = @_;

    ## maintain order
    switch ($type) {
        case /bam/ {
            map { move( $_, 'Data/PolishedBams' ) } @$to_mv;
        }
        case /bam.bai/ {
            map { move( $_, 'Data/PolishedBams' ) } @$to_mv;
        }
        case /(fastq$|fq$)/ {
            map { move( $_, 'Data/Primary_Data' ) } @$to_mv;
        }
        case /fastqc/ {
            map { move( $_, 'Reports/fastqc' ) } @$to_mv;
        }
        case /flagstat$/ {
            map { move( $_, 'Reports/flagstat' ) } @$to_mv;
        }
        case /stats$/ {
            map { move( $_, 'Reports/stats' ) } @$to_mv;
        }
        case /(ann|summary.html|csv|genes.txt)/ {
            map { move( $_, 'Reports/SnpEff' ) } @$to_mv;
        }
        case /fcounts/ {
            map { move( $_, 'Reports/featureCounts' ) } @$to_mv;
        }
        case /WHAM/ {
            map { move( $_, 'VCF/WHAM' ) } @$to_mv;
        }
        case /g.vcf.idx/ {
            map { move( $_, 'VCF/GVCFs' ) } @$to_mv;
        }
        case /g.vcf$/ {
            map { move( $_, 'VCF/GVCFs' ) } @$to_mv;
        }
        case /log.txt/ {
            map { move( $_, 'Reports/RunLogs' ) } @$to_mv;
        }
        case /multiqc/ {
            map { move( $_, 'Reports/' ) } @$to_mv;
        }
        case /pdf/ {
            map { move( $_, 'Reports/' ) } @$to_mv;
        }
        case /FQF/ {
            map { move( $_, 'VCF/Complete' ) } @$to_mv;
        }
        else {
            map { say "Nomand file: $_" } @$to_mv;
        }
    }
}

## ----------------------------------------------------- ##

