#!/usr/bin/env perl
use strict;
use warnings;
use v5.10;
use FindBin;
use lib "$FindBin::Bin/../lib";
use FQF;
use Getopt::Long;

my $usage = << "EOU";

Synopsis:
    ./FQF -cfg [FILE] --run 
    ./FQF -cfg [FILE] -f [FILE] --run
    ./FQF -ec
    ./FQF -fc
    ./FQF -clean

Description:

    FQF is a NGS pipeline created for the 
    Utah Genome Project (UGP) and The USTAR Center for Genetic Discovery (UCGD)

    Additional Protocol documentation here: http://weatherby.genetics.utah.edu/UGP/wiki/index.php/UGP_Variant_Protocol


Required options:

    --config, -cfg          FQF configuration file.

Additional options:

    --run, -r               Will run the FQF pipeline.
                            When this option is off a display of commands will be piped to STDOUT.

    --file, -f              Input file containing files to start from.

    --error_check, -ec      Run quick check of log files for run errors.

    --fqf_check, -fc        Check fqf2bam and bam2gvcf for completed files.

    --clean, -c             Will clean up all log, data, slurm, index and report files.

    --version, -v           Print FQF version.

    --help, -h              Print this usage statement.

EOU

my %fqf_opts = ();
GetOptions(
    \%fqf_opts,              
    "config|cfg=s",
    "file|f=s",
    "jobs_per_node|jpn=i", 
    "qstat_limit|ql=i",
    "fqf_check|fc",
    "error_check|ec",      
    "run|r",               
    "version|v",
    "clean|c",             
    "help|h",              
);
die $usage if $fqf_opts{help};

## add version
$fqf_opts{pipeline_version} = '1.3.8';

## version check
if ( $fqf_opts{version} ) {
    say "FQF version: ", $fqf_opts{pipeline_version};
    exit(0);
}

# set up commandline defaults.
if ( $fqf_opts{clean} ) {
    `rm -rf *.log-* *processing *launched *complete *cmds *error *.sam.fixbam *err *FQFexecute.txt core.* CMD_stack.store *sbatch *.out launch.index cmd_tmp slurm_tmp *theVoid`;
    exit(0);
}

if ( $fqf_opts{fqf_check} ) {
    system("grep 'BAM  -->' fastq2bam.log-*|perl -lane 'if (! -e \$F[-1]) { print \"not found \$_\"}'");
    system("grep 'gVCF  -->' bam2gvcf.log-*|perl -lane 'if (! -e \$F[-1]) { print \"not found \$_\"}'");
    exit(0);
}
## error checks.
if ( $fqf_opts{error_check} ) {
    my $DIR = IO::Dir->new('.');

    foreach my $file ( $DIR->read) {
        chomp $file;
        next if ( -d $file);
        next if ( $file !~ /(log|err)/);
        system("grep -iH error $file"); 
        system("grep -iH failed $file"); 
    }
    exit(0);
}

## check before moving on.
die "Required options not met\n$usage" unless ( $fqf_opts{config});

## build object
my $fqf = FQF->new( commandline => \%fqf_opts, );

## keep rerun count
my $run_count = 1;

REPROCESS:
$fqf->pipeline;

if ($fqf_opts{config} =~ /toGVCF/ ) {
    no warnings;
    my @bams  = `grep 'BAM  -->' fastq2bam.log-*|perl -lane 'if (! -e \$F[-1]) { print \"not found \$_\"}'`;
    my @gvcfs = `grep 'gVCF  -->' bam2gvcf.log-*|perl -lane 'if (! -e \$F[-1]) { print \"not found \$_\"}'`;

    my @bam_founds  = grep { $_ =~ /not found/ } @bams;
    my @gvcf_founds = grep { $_ =~ /not found/ } @gvcfs;

    if ( @bam_founds or @gvcf_founds) {
        if ( $run_count => 5 ) {
            `Salvo -job_flush`;
            $fqf->remove_empty_dirs;
            $fqf->ERROR("Rerun of toGVCF attempted 5 times, failed all!");
            exit(1);
        }
        system "perl -p -i -e 's/fastq2bam:complete//' PROGRESS";
        system "perl -p -i -e 's/bam2gvcf:complete//' PROGRESS";
        $run_count++;
        goto REPROCESS;
    }
}

